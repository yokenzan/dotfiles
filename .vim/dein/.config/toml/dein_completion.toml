[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
    let g:neosnippet#snippets_directory = '~/.vim/snippets'
'''
depends = ['neosnippet-snippets', 'coc.nvim']


[[plugins]]
repo = 'Shougo/neosnippet-snippets'


[[plugins]]
repo  = 'neoclide/coc.nvim'
rev   = 'release'
# merge = 0
# build = 'yarn install --frozen-lockfile'
hook_add = '''

    " Use <c-space> to trigger completion.
    inoremap <silent><expr><c-space> coc#refresh()

    " diagnostics

    nmap <silent>[A            <Plug>(coc-diagnostic-prev)
    nmap <silent>]A            <Plug>(coc-diagnostic-next)
    nmap <silent><space>cd     :<C-u>CocList diagnostics<CR>
    nmap <silent><space>cD     <Plug>(coc-diagnostic-info)

    nmap <silent><space>cr     <Plug>(coc-rename)
    nmap <silent><space>cf     <Plug>(coc-float-jump)

    nmap <silent><space>c<C-]> <Plug>(coc-definition)
    nmap <silent><space>ctd    <Plug>(coc-type-definition)
    nmap <silent><space>ci     <Plug>(coc-implementation)
    nmap <silent><space>cfr    <Plug>(coc-references)
    nmap <silent><space>ch     :<C-u>call CocAction("showSignatureHelp")<CR>
    nmap <silent><space>cl     :<C-u>call CocAction("workspaceSymbols")<CR>
    nmap <silent><space>co     :<C-u>CocList outline<CR>

    nnoremap <silent><space>K :call <SID>show_documentation()<CR>

    function! s:show_documentation()
      if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
      else
        call CocAction('doHover')
      endif
    endfunction

    " Highlight symbol under cursor on CursorHold
    augroup CocGroup
        autocmd!
        autocmd CursorHold * silent call CocActionAsync('highlight')
        autocmd BufEnter,WinEnter *.csv,*.uke CocDisable
        autocmd BufLeave,WinLeave *.csv,*.uke CocEnable
    augroup end

    " Remap for rename current word
    " nmap <Space>cr <Plug>(coc-rename)

    " Remap for format selected region
    " xmap <Space>cf <Plug>(coc-format-selected)
    " nmap <Space>cf <Plug>(coc-format-selected)

    " Remap for do codeAction of selected region
    xmap <Space>ca <Plug>(coc-codeaction-selected)
    nmap <Space>ca <Plug>(coc-codeaction-selected)


    smap <silent><expr><C-l>
                \ neosnippet#jumpable()   ? "\<Plug>(neosnippet_jump)"   :
                \ neosnippet#expandable() ? "\<Plug>(neosnippet_expand)" :
                \ coc#refresh()

    imap <silent><expr><C-l>
                \ coc#pum#visible() ? coc#pum#confirm() :
                \ neosnippet#jumpable()   ? "\<Plug>(neosnippet_jump)"   :
                \ neosnippet#expandable() ? "\<Plug>(neosnippet_expand)" :
                \ coc#refresh()
'''
depends = ['wellle/tmux-complete.vim']


[[plugins]]
repo  = 'wellle/tmux-complete.vim'


# ðŸŒµ Viewer & Finder for LSP symbols and tags
[[plugins]]
repo = 'liuchengxu/vista.vim'
hook_add = '''
    au VimEnter * nested nnoremap <silent><Space>uo :<C-u>Vista coc<CR>
    let g:vista_default_executive = 'coc'
    let g:vista_sidebar_width = 45
    let g:vista_icon_indent = [">", "v"]
    let g:vista#renderer#icons = {
    \   "function": "é–¢æ•°",
    \   "variable": "å¤‰æ•°",
    \  }
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
    let g:neosnippet#snippets_directory = '~/.vim/snippets'
'''
depends = ['neosnippet-snippets', 'coc.nvim']


[[plugins]]
repo = 'Shougo/neosnippet-snippets'


[[plugins]]
repo  = 'neoclide/coc.nvim'
merge = 0
build = 'yarn install --frozen-lockfile'
hook_add = '''

    " Use <c-space> to trigger completion.
    inoremap <silent><expr><c-space> coc#refresh()

    nmap <silent>[C <Plug>(coc-diagnostic-prev)
    nmap <silent>]C <Plug>(coc-diagnostic-next)

    nmap <silent><space>c<C-]> <Plug>(coc-definition)
    nmap <silent><space>ctd    <Plug>(coc-type-definition)
    nmap <silent><space>ci     <Plug>(coc-implementation)
    nmap <silent><space>cfr    <Plug>(coc-references)

    nnoremap <silent><space>K :call <SID>show_documentation()<CR>

    function! s:show_documentation()
      if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
      else
        call CocAction('doHover')
      endif
    endfunction

    " Highlight symbol under cursor on CursorHold
    autocmd CursorHold * silent call CocActionAsync('highlight')

    " Remap for rename current word
    nmap <Space>cr <Plug>(coc-rename)

    " Remap for format selected region
    xmap <Space>cf <Plug>(coc-format-selected)
    nmap <Space>cf <Plug>(coc-format-selected)

    " Remap for do codeAction of selected region
    xmap <Space>ca <Plug>(coc-codeaction-selected)
    nmap <Space>ca <Plug>(coc-codeaction-selected)


    smap <silent><expr><C-l>
                \ neosnippet#jumpable()   ? "\<Plug>(neosnippet_jump)"   :
                \ neosnippet#expandable() ? "\<Plug>(neosnippet_expand)" :
                \ "\<Tab>"

    imap <silent><expr><C-l>
                \ pumvisible() ? coc#_select_confirm() :
                \ neosnippet#jumpable()   ? "\<Plug>(neosnippet_jump)"   :
                \ neosnippet#expandable() ? "\<Plug>(neosnippet_expand)" :
                \ coc#refresh()
'''


[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
    let g:neosnippet#snippets_directory = '~/.vim/snippets'
'''
depends = ['neosnippet-snippets', 'coc.nvim']


[[plugins]]
repo = 'Shougo/neosnippet-snippets'


[[plugins]]
repo  = 'neoclide/coc.nvim'
rev   = 'release'
# merge = 0
# build = 'yarn install --frozen-lockfile'
hook_add = '''
    let g:coc_borderchars = ['-', '|', '-', '|', '+', '+', '+', '+']
    let g:coc_border_joinchars = ['+', '+', '+', '+']

    " Use <c-space> to trigger completion.
    inoremap <silent><expr><C-@> coc#refresh()

    " diagnostics

    nmap <silent>[A            <Plug>(coc-diagnostic-prev)
    nmap <silent>]A            <Plug>(coc-diagnostic-next)
    nmap <silent><space>cd     <Cmd>CocDiagnostics<CR>
    " nmap <silent><space>cd     :<C-u>CocList diagnostics<CR>
    " nmap <silent><space>cD     <Plug>(coc-diagnostic-info)

    nmap <silent><space>cr     <Plug>(coc-rename)
    nmap <silent><space>cf     <Plug>(coc-float-jump)

    nmap <silent><space>c<C-]>  <Plug>(coc-definition)
    nmap <silent><space>ctd     <Plug>(coc-type-definition)
    nmap <silent><space>cg<C-]> <Plug>(coc-implementation)
    nmap <silent><space>cfr     <Plug>(coc-references)
    nmap <silent><space>ch      :<C-u>call CocAction("showSignatureHelp")<CR>

    nmap <silent><space>cs      :<C-u>CocList -I symbols<CR>
    nmap <silent><space>co      :<C-u>CocList outline<CR>
    nmap <silent><space>cD     <Cmd>CocList diagnostics<CR>

    " Applying code actions to the selected code block
    " Example: `<leader>aap` for current paragraph
    xmap <space>cca <Plug>(coc-codeaction-selected)
    nmap <space>cca <Plug>(coc-codeaction-selected)

    " Remap keys for applying code actions at the cursor position
    nmap <space>ccc <Plug>(coc-codeaction-cursor)
    " Remap keys for apply code actions affect whole buffer
    nmap <space>ccs <Plug>(coc-codeaction-source)

    nmap <silent><space>ccr <Plug>(coc-codeaction-refactor)
    xmap <silent><space>ccr <Plug>(coc-codeaction-refactor-selected)
    nmap <silent><space>ccR <Plug>(coc-codeaction-refactor-selected)

    nmap <silent><space>cla <Plug>(coc-codelends-action)

    xmap <silent><space>cF     <Plug>(coc-format-selected)
    nmap <silent><space>cF     <Plug>(coc-format-selected)

    " Remap <C-f> and <C-b> to scroll float windows/popups
    if has('nvim-0.4.0') || has('patch-8.2.0750')
      nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
      nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
      inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
      inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
      vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
      vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
    endif

    nnoremap <silent><space>K <Cmd>call ShowDocumentation()<CR>

    function! ShowDocumentation()
        if CocAction('hasProvider', 'hover')
            call CocActionAsync('doHover')
        else
            call feedkeys('K', 'in')
        endif
    endfunction
    " function! s:show_documentation()
    "   if (index(['vim','help'], &filetype) >= 0)
    "     execute 'h '.expand('<cword>')
    "   else
    "     call CocAction('doHover')
    "   endif
    " endfunction

    " Highlight symbol under cursor on CursorHold
    augroup CocGroup
        autocmd!
        autocmd CursorHold * silent call CocActionAsync('highlight')
        autocmd BufEnter,WinEnter *.csv,*.uke CocDisable
        autocmd BufLeave,WinLeave *.csv,*.uke CocEnable

        " Update signature help on jump placeholder
        autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    augroup end

    smap <silent><expr><C-l>
                \ neosnippet#jumpable()   ? "\<Plug>(neosnippet_jump)"   :
                \ neosnippet#expandable() ? "\<Plug>(neosnippet_expand)" :
                \ coc#refresh()

    imap <silent><expr><C-l>
                \ coc#pum#visible() ? coc#pum#confirm() :
                \ neosnippet#jumpable()   ? "\<Plug>(neosnippet_jump)"   :
                \ neosnippet#expandable() ? "\<Plug>(neosnippet_expand)" :
                \ coc#refresh()
'''
depends = ['wellle/tmux-complete.vim']


[[plugins]]
repo  = 'wellle/tmux-complete.vim'


# ðŸŒµ Viewer & Finder for LSP symbols and tags
[[plugins]]
repo = 'liuchengxu/vista.vim'
hook_add = '''
    au VimEnter * nested nnoremap <silent><Space>uo :<C-u>Vista coc<CR>
    let g:vista_default_executive = 'coc'
    let g:vista_sidebar_width = 45
    let g:vista_icon_indent = ["->", "â–¼"]
    let g:vista#renderer#icons = {
    \   "function": "é–¢æ•°",
    \   "variable": "å¤‰æ•°",
    \  }

    au VimEnter * nested nnoremap <silent><Space>uo :<C-u>Vista coc<CR>
'''

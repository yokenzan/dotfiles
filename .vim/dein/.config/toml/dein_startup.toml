[[plugins]]
repo = 'Shougo/dein.vim'


[[plugins]]
repo = 'vim-jp/vimdoc-ja'
hook_add = '''
    set helplang=ja
'''


[[plugins]]
repo = 'thinca/vim-ref'
hook_add = '''
    let g:ref_phpmanual_path = $HOME . '/.vim/ref/php-chunked-xhtml'
    let g:ref_detect_filetype = {
    \       'php' : 'phpmanual'
    \}

    let g:ref_source_webdict_sites = {
    \   'wiki': {
    \     'url': 'http://ja.wikipedia.org/wiki/%s',
    \   },
    \   'ee': {
    \     'url': 'http://googledictionary.freecollocation.com/meaning?word=%s',
    \   },
    \ }

    "デフォルト
    let g:ref_source_webdict_sites.default = 'ee'

    function! g:ref_source_webdict_sites.ee.filter(output)
      return join(split(a:output, "\n")[5 :], "\n")
    endfunction

    function! g:ref_source_webdict_sites.wiki.filter(output)
      return join(split(a:output, "\n")[5 :], "\n")
    endfunction

    aug enableRefKeyMaps
        au!
        nnoremap <Space>re :<C-u>Ref webdict ee 
        nnoremap <Space>rw :<C-u>Ref webdict wiki 
        nnoremap <Space>rp :<C-u>Ref phpmanual 
    aug END
'''


[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
    let g:ale_sign_column_always    = 1
    let g:ale_sign_error            = 'Ｅ'
    let g:ale_sign_warning          = 'Ｗ'

    let g:ale_lint_on_save          = 1
    let g:ale_lint_on_enter         = 0
    let g:ale_set_quickfix          = 0
    if has('gui_running')
        let g:ale_lint_on_text_changed  = 0
        let g:ale_lint_on_insert_leave  = 0
    else
        let g:ale_lint_on_text_changed  = 1
        let g:ale_lint_on_insert_leave  = 1
    endif

    aug enableALEKeyMaps
        au!
        nmap <silent><Space>al :<C-u>ALELint<CR>
        nmap <silent><Space>ad :<C-u>ALEDetail<CR>
        nmap <silent>[a        :<C-u>ALEPrevious<CR>
        nmap <silent>]a        :<C-u>ALENext<CR>
    aug END
'''


[[plugins]]
repo = 'Shougo/context_filetype.vim'


[[plugins]]
repo = 'osyo-manga/vim-precious'


[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
    if has('gui_running')
        let g:gitgutter_sign_base               = '▶'
    else
        let g:gitgutter_sign_base               = ''
    endif
    let g:gitgutter_sign_added              = g:gitgutter_sign_base
    let g:gitgutter_sign_modified           = g:gitgutter_sign_base
    let g:gitgutter_sign_removed            = g:gitgutter_sign_base
    let g:gitgutter_sign_removed_first_line = g:gitgutter_sign_base
    let g:gitgutter_sign_modified_removed   = g:gitgutter_sign_base
'''


[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
    aug enableNERDTree
        au!
        au VimEnter * nested noremap <Space>nt :NERDTreeToggle<Return>
    aug END
'''


[[plugins]]
repo = 'tomtom/tcomment_vim'


[[plugins]]
repo = 'tpope/vim-surround'


[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
    function! SkkStatusline()
        return eskk#is_enabled()
                    \ ? g:eskk#statusline_mode_strings[eskk#get_mode()] . ' '
                    \ : ''
    endfunction

    let g:airline_mode_map = {
                \ '__' : '-',
                \ 'c'  : 'C',
                \ 'i'  : 'I',
                \ 'ic' : 'IC',
                \ 'ix' : 'IX',
                \ 'n'  : 'N',
                \ 'ni' : '(I)',
                \ 'no' : '(O)',
                \ 'R'  : 'R',
                \ 'Rv' : 'RV',
                \ 's'  : 'S',
                \ 'S'  : 'SL',
                \ '' : 'SB',
                \ 't'  : 'T',
                \ 'v'  : 'V',
                \ 'V'  : 'VL',
                \ '' : 'VB',
                \ }

    let g:airline_powerline_fonts    = 0
    let g:airline_detect_crypt       = 0
    let g:airline_detect_iminsert    = 0
    let g:airline_detect_spell       = 0
    let g:airline_detect_spelllang   = 0
    let g:airline_highlighting_cache = 0
    let g:airline_inactive_collapse  = 0

    let g:airline#parts#ffenc#skip_expected_string = 'utf-8[unix]'

    let g:airline#extensions                       = []
    let g:airline#extensions#hunks#enabled         = 0
    let g:airline#extensions#whitespace#enabled    = 0
    let g:airline#extensions#tabline#enabled       = 0

    let g:airline_theme     = 'light'
    let g:airline_section_a = airline#section#create(['mode', 'paste'])
    let g:airline_section_b = airline#section#create([
                \   '%{SkkStatusline()}', '%{fugitive#head()}', ' %n'
                \   ])
    let g:airline_section_x = airline#section#create(['filetype'])
    let g:airline_section_z = airline#section#create(['%l/%L:%c'])

    let g:airline#extensions#default#layout = [
        \ ['a', 'b', 'c'],
        \ ['x', 'y', 'z']
        \ ]
'''
depends = ['vim-airline-themes']


[[plugins]]
repo = 'vim-airline/vim-airline-themes'


[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
    nnoremap <Space>fs :<C-u>belowright Gstatus<CR>
    nnoremap <Space>fr :<C-u>Gread<CR>
    nnoremap <Space>fb :<C-u>Gblame<CR>
    nnoremap <Space>fd :<C-u>Gdiff<CR>
'''


[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'


[[plugins]]
repo = 'tpope/vim-dispatch'


[[plugins]]
repo = 'bkad/CamelCaseMotion'
hook_add = '''
    map  <silent>]w  <Plug>CamelCaseMotion_w
    map  <silent>]b  <Plug>CamelCaseMotion_b
    map  <silent>]e  <Plug>CamelCaseMotion_e
    omap <silent>]iw <Plug>CamelCaseMotion_iw
    vmap <silent>]iw <Plug>CamelCaseMotion_iw
    omap <silent>]ib <Plug>CamelCaseMotion_ib
    vmap <silent>]ib <Plug>CamelCaseMotion_ib
    omap <silent>]ie <Plug>CamelCaseMotion_ie
    vmap <silent>]ie <Plug>CamelCaseMotion_ie
'''


[[plugins]]
repo     = 'Shougo/unite.vim'
hook_add = '''
    if !has('python3')
        let g:unite_split_rule = 'rightbelow'
        let g:unite_winwidth   = 45
        let g:unite_source_history_yank_enable = 1
        let g:unite_source_file_mru_limit      = 1000

        aug enableUniteKeyBindingsUnlessHasPython
            au!
            au VimEnter * nested nnoremap <silent><Space>ut  :<C-u>Unite tab<CR>
            au VimEnter * nested nnoremap <silent><Space>ub  :<C-u>Unite buffer<CR>
            au VimEnter * nested nnoremap <silent><Space>ur  :<C-u>Unite -buffer-name=register register<CR>
            au VimEnter * nested nnoremap <silent><Space>uj  :<C-u>Unite jump<CR>
            " ファイル関係
            au VimEnter * nested nnoremap <silent><Space>um  :<C-u>Unite file_mru<CR>
            au VimEnter * nested nnoremap <silent><Space>ug  :<C-u>Unite -buffer-name=files file_rec/git<CR>
            au VimEnter * nested nnoremap <silent><Space>ua  :<C-u>Unite -buffer-name=files file_rec<CR>
            au VimEnter * nested nnoremap <silent><Space>uf  :<C-u>UniteWithBufferDir  -buffer-name=files file<CR>
            au VimEnter * nested nnoremap <silent><Space>uc  :<C-u>UniteWithCurrentDir -buffer-name=files file<CR>
            " grep関係
            au VimEnter * nested nnoremap <silent><Space>gg  :<C-u>Unite -auto-preview grep/git<CR>
            au VimEnter * nested nnoremap <silent><Space>gp  :<C-u>Unite -auto-preview grep<CR>
            au VimEnter * nested nnoremap <silent><Space>rg  :<C-u>Unite -resume -auto-preview grep/git<CR>
            au VimEnter * nested nnoremap <silent><Space>rp  :<C-u>Unite -resume -auto-preview grep<CR>

            au VimEnter * nested nnoremap <silent><Space>uy :<C-u>Unite history/yank<CR>
        aug END
    endif
'''
depends  = ['unite-outline', 'unite-gtags', 'neoyank.vim']


[[plugins]]
repo     = 'Shougo/unite-outline'
hook_add = '''
    " 常にunite-outlineをつかう
    aug enableUniteOutline
        au!
        " with auto highlight
        au VimEnter * nested nnoremap <silent><Space>uO :<C-u>Unite -winwidth=50 -vertical -no-empty -no-quit -auto-highlight outline<CR>
        au VimEnter * nested nnoremap <silent><Space>uo :<C-u>Unite -winwidth=50 -vertical -no-empty outline<CR>
    aug END
'''


[[plugins]]
repo     = 'hewes/unite-gtags'
if       = '!has("python3")'
hook_add = '''
    nnoremap <silent><Space>gf :<C-u>Unite gtags/file<CR>
    nnoremap <silent><Space>gr :<C-u>Unite -resume -auto-preview gtags/ref<CR>
'''


[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
    " let g:indentLine_setColors = 0
'''


[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
    let quickrun_config = {
    \   "_" : {
    \       "outputter/buffer/close_on_empty" : 1,
    \       "runner" : "vimproc"
    \   }
    \}
    aug enableQuickRun
        au!
        au VimEnter * nested noremap <Space>qr :<C-u>QuickRun<CR>
    aug END
'''


[[plugins]]
repo = 'tyru/eskk.vim'
hook_add = '''
    let g:eskk#directory = "~/.skk"
    let g:eskk#dictionary = { 'path': "~/.skk-jisyo", 'sorted': 0, 'encoding': 'utf-8', }
    let g:eskk#large_dictionary = { 'path': "~/.skk/SKK-JISYO.L", 'sorted': 1, 'encoding': 'euc-jp', }
    set imdisable
    let g:eskk#enable_completion = 1
    let g:eskk#server = {
    \   'host': 'localhost',
    \   'port': 55100,
    \}
    let g:eskk#marker_henkan         = '＃'
    let g:eskk#marker_henkan_select  = '＠'
    let g:eskk#show_candidates_count = 2
'''


[[plugins]]
repo = 'jwalton512/vim-blade'
hook_source = '''
    syntax on
    let g:blade_custom_directives = ['datetime', 'namespaced::directive']
    let g:blade_custom_directives_pairs = {'cache': 'endcache'}
'''


[[plugins]]
repo = 'aklt/plantuml-syntax'


[[plugins]]
repo = 'mattn/emmet-vim'
hook_add = '''
    let g:user_emmet_leader_key='<C-y>'
'''


[[plugins]]
repo = 'othree/html5.vim'


[[plugins]] 
repo     = 'fuenor/qfixhowm'
hook_add = '''
    let g:QFixHowm_Key      = '<Space>'
    let g:QFixHowm_FileType = 'markdown'
    let g:howm_dir          = '~/.howm'
    let g:howm_filename     = '%Y%m%d_%H%M%S.md'
    let g:howm_fileencoding = 'utf-8'
'''


[[plugins]]
repo  = 'tpope/vim-repeat'


[[plugins]]
repo     = 'kana/vim-textobj-user'
hook_add = '''
    function! TextObjUserSetting()
        " 日付表記の選択
        call textobj#user#plugin('datetime', {
                    \       'date' : {
                    \           'pattern' : '\<\d\{2,4\}[-\/]\d\d[-\/]\d\d\>',
                    \           'select'  : ['ad', 'id'],
                    \       },
                    \   })

        " コメント部分の選択
        call textobj#user#plugin('comment', {
                    \       '-' : {
                    \           'select-a-function' : 'WholeComment',
                    \           'select-a' : 'a/',
                    \       },
                    \   })

        function! WholeComment()
            normal! [/
            let head_pos = getpos('.')
            normal! ]/
            let tail_pos = getpos('.')
            return['v', head_pos, tail_pos]
        endfunction
    endfunction

    au VimEnter * nested call TextObjUserSetting()
'''


[[plugins]]
repo     = 'easymotion/vim-easymotion'



[[plugins]]
repo     = 'yokenzan/vim-easy-align'
rev      = 'customize'
hook_add = '''
    nmap ga <Plug>(EasyAlign)
    xmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'Shougo/dein.vim'


[[plugins]]
repo = 'vim-jp/vimdoc-ja'
hook_add = '''
    set helplang=ja
'''


[[plugins]]
repo = 'thinca/vim-ref'
hook_add = '''
    let g:ref_source_webdict_sites = {
    \   'wiki': {
    \     'url': 'http://ja.wikipedia.org/wiki/%s',
    \   },
    \   'ee': {
    \     'url': 'http://googledictionary.freecollocation.com/meaning?word=%s',
    \   },
    \ }

    "„Éá„Éï„Ç©„É´„Éà
    let g:ref_source_webdict_sites.default = 'ee'

    function! g:ref_source_webdict_sites.ee.filter(output)
      return join(split(a:output, "\n")[5 :], "\n")
    endfunction

    function! g:ref_source_webdict_sites.wiki.filter(output)
      return join(split(a:output, "\n")[5 :], "\n")
    endfunction

    augroup enableRefKeyMaps
        autocmd!
        nnoremap <Space>re :<C-u>Ref webdict ee
        nnoremap <Space>rw :<C-u>Ref webdict wiki
    augroup end
'''


[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
    let g:ale_disable_lsp           = 1

    let g:ale_echo_msg_error_str    = 'üö´'
    let g:ale_echo_msg_warning_str  = '‚ö† '
    let g:ale_echo_msg_format       = '[%linter%] [%severity%] %s'

    let g:ale_sign_column_always    = 0
    let g:ale_sign_error            = 'AE'
    let g:ale_sign_warning          = 'AW'

    let g:ale_lint_on_save          = 1
    let g:ale_lint_on_enter         = 0
    let g:ale_set_quickfix          = 1
    let g:ale_lint_on_text_changed  = 1
    let g:ale_lint_on_insert_leave  = 0

    let g:ale_linters = {
                \ 'php': ['phpstan', 'phpcs']
                \ }
    let g:ale_fixers  = {
                \ 'python': ['isort', 'black','autopep8'],
                \ 'ruby':   ['rubocop'],
                \ 'php':    ['phpcbf']
                \ }

    let g:ale_php_phpcs_standard = 'PSR12'

    aug enableALEKeyMaps
        au!
        nmap <silent><Space>al :<C-u>ALELint<CR>
        nmap <silent><Space>ad :<C-u>ALEDetail<CR>
        nmap <silent><Space>af :<C-u>ALEFix<CR>
        nmap <silent><Space>aD :<C-u>ALEDisable<CR>
        nmap <silent><Space>ab :<C-u>ALEDisableBuffer<CR>
        nmap <silent>[a        :<C-u>ALEPrevious<CR>
        nmap <silent>]a        :<C-u>ALENext<CR>
        autocmd BufEnter,WinEnter *.csv,*.uke ALEDisableBuffer
    aug END
'''


[[plugins]]
repo = 'Shougo/context_filetype.vim'


[[plugins]]
repo = 'osyo-manga/vim-precious'


[[plugins]]
repo     = 'airblade/vim-gitgutter'
if       = 'executable("git")'
hook_add = '''
    let s:gitgutter_sign_candidates         = ['„Çù', 'ÓÇ∞', '„Äá', '‚óè']
    let s:gitgutter_sign_index              = 0

    let s:gitgutter_sign_base               = s:gitgutter_sign_candidates[s:gitgutter_sign_index]
    let g:gitgutter_sign_added              = s:gitgutter_sign_base
    let g:gitgutter_sign_modified           = s:gitgutter_sign_base
    let g:gitgutter_sign_removed            = s:gitgutter_sign_base
    let g:gitgutter_sign_removed_first_line = s:gitgutter_sign_base
    let g:gitgutter_sign_modified_removed   = s:gitgutter_sign_base
'''


# [[plugins]]
# repo = 'scrooloose/nerdtree'
# hook_add = '''
#     aug enableNERDTree
#         au!
#         au VimEnter * nested noremap <Space>nt :NERDTreeToggle<Return>
#     aug END
# '''


[[plugins]]
repo = 'tomtom/tcomment_vim'


[[plugins]]
repo = 'tpope/vim-surround'


[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
    function! SkkStatusline()
        try
            return eskk#is_enabled()
                        \ ? g:eskk#statusline_mode_strings[eskk#get_mode()] . ' '
                        \ : ''
        catch
            return ''
        endtry
    endfunction

    function! CocNvimStatusline()
        try
            return g:coc_enabled ? 'Ë£ú ': ''
        catch
            return ''
        endtry
    endfunction

    function! ConcealLevelStatusLine()
        return &conceallevel == 2
                    \ ? 'Èö†'
                    \ : ''
    endfunction

    function! WrapStatusLine()
        return &wrap
                    \ ? 'Áï≥'
                    \ : ''
    endfunction

    function! SpellStatusLine()
        return &spell
                    \ ? 'Á≥æ'
                    \ : ''
    endfunction

    function! PasteStatusLine()
        return &paste
                    \ ? 'Ë≤º'
                    \ : ''
    endfunction

    function! Padspace()
        if &paste || &spell || &conceallevel == 2 || &wrap
            return ' '
        endif

        return ''
    endfunction

    let g:airline_mode_map = {
                \ '__' : '-',
                \ 'c'  : 'C',
                \ 'i'  : 'I',
                \ 'ic' : 'IC',
                \ 'ix' : 'IX',
                \ 'n'  : 'N',
                \ 'ni' : 'i',
                \ 'no' : 'o',
                \ 'R'  : 'R',
                \ 'Rv' : 'RV',
                \ 's'  : 'S',
                \ 'S'  : 'SL',
                \ '' : 'SB',
                \ 't'  : 'T',
                \ 'v'  : 'V',
                \ 'V'  : 'VL',
                \ '' : 'VB',
                \ }

    let g:airline_powerline_fonts    = 0
    let g:airline_detect_crypt       = 0
    let g:airline_detect_iminsert    = 0
    let g:airline_detect_spell       = 0
    let g:airline_detect_spelllang   = 0
    let g:airline_highlighting_cache = 0
    let g:airline_inactive_collapse  = 0

    let g:airline#parts#ffenc#skip_expected_string = 'utf-8[unix]'

    let g:airline#extensions                       = []
    let g:airline#extensions#hunks#enabled         = 0
    let g:airline#extensions#whitespace#enabled    = 0
    let g:airline#extensions#tabline#enabled       = 0
    let g:airline#extensions#wordcount#enabled     = 0
    " let g:airline#extensions#ale#enabled           = 0
    " let g:airline#extensions#ale#error_symbol      = ''
    " let g:airline#extensions#ale#warning_symbol    = ''
    " let g:airline#extensions#ale#open_lnum_symbol  = ''
    " let g:airline#extensions#ale#close_lnum_symbol = ''

    let g:airline_theme     = 'xtermlight'
    let g:airline_section_a = airline#section#create(['mode'])
    let g:airline_section_b = airline#section#create([
                \   '%{SkkStatusline()}', '%{CocNvimStatusline()}', '%{fugitive#head()}', ' %n', '%{Padspace()}',
                \   '%{ConcealLevelStatusLine()}', '%{WrapStatusLine()}', '%{PasteStatusLine()}', '%{SpellStatusLine()}'
                \   ])
    let g:airline_section_x = airline#section#create(['filetype'])
    let g:airline_section_z = airline#section#create(['%l/%L:%c'])

    let g:airline#extensions#default#layout = [
        \ ['a', 'b', 'c'],
        \ ['x', 'y', 'z'],
        \ ]
'''
depends = ['vim-airline-themes']


[[plugins]]
repo = 'vim-airline/vim-airline-themes'


[[plugins]]
repo     = 'tpope/vim-fugitive'
if       = 'executable("git")'
hook_add = '''
    nnoremap <Space>fs :<C-u>belowright Git<CR>
    nnoremap <Space>fr :<C-u>Gread<CR>
    nnoremap <Space>fb :<C-u>Git blame<CR>
    nnoremap <Space>fd :<C-u>Gdiff<CR>
'''


[[plugins]]
repo = 'tpope/vim-rhubarb'


[[plugins]]
repo = 'tommcdo/vim-fubitive'


[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'


[[plugins]]
repo = 'tpope/vim-dispatch'


[[plugins]]
repo = 'bkad/CamelCaseMotion'
hook_add = '''
    map  <silent>]w  <Plug>CamelCaseMotion_w
    map  <silent>]b  <Plug>CamelCaseMotion_b
    map  <silent>]e  <Plug>CamelCaseMotion_e
    omap <silent>]iw <Plug>CamelCaseMotion_iw
    vmap <silent>]iw <Plug>CamelCaseMotion_iw
    omap <silent>]ib <Plug>CamelCaseMotion_ib
    vmap <silent>]ib <Plug>CamelCaseMotion_ib
    omap <silent>]ie <Plug>CamelCaseMotion_ie
    vmap <silent>]ie <Plug>CamelCaseMotion_ie
'''


[[plugins]]
repo     = 'Shougo/unite.vim'
hook_add = '''
    if !has('python3')
        let g:unite_split_rule = 'rightbelow'
        let g:unite_winwidth   = 45
        let g:unite_source_history_yank_enable = 1
        let g:unite_source_file_mru_limit      = 1000

        aug enableUniteKeyBindingsUnlessHasPython
            au!
            au VimEnter * nested nnoremap <silent><Space>ut  :<C-u>Unite tab<CR>
            au VimEnter * nested nnoremap <silent><Space>ub  :<C-u>Unite buffer<CR>
            au VimEnter * nested nnoremap <silent><Space>ur  :<C-u>Unite -buffer-name=register register<CR>
            au VimEnter * nested nnoremap <silent><Space>uj  :<C-u>Unite jump<CR>
            " „Éï„Ç°„Ç§„É´Èñ¢‰øÇ
            au VimEnter * nested nnoremap <silent><Space>um  :<C-u>Unite file_mru<CR>
            au VimEnter * nested nnoremap <silent><Space>ug  :<C-u>Unite -buffer-name=files file_rec/git<CR>
            au VimEnter * nested nnoremap <silent><Space>ua  :<C-u>Unite -buffer-name=files file_rec<CR>
            au VimEnter * nested nnoremap <silent><Space>uf  :<C-u>UniteWithBufferDir  -buffer-name=files file<CR>
            au VimEnter * nested nnoremap <silent><Space>uc  :<C-u>UniteWithCurrentDir -buffer-name=files file<CR>
            " grepÈñ¢‰øÇ
            au VimEnter * nested nnoremap <silent><Space>gg  :<C-u>Unite -auto-preview grep/git<CR>
            au VimEnter * nested nnoremap <silent><Space>gp  :<C-u>Unite -auto-preview grep<CR>
            au VimEnter * nested nnoremap <silent><Space>rg  :<C-u>Unite -resume -auto-preview grep/git<CR>
            au VimEnter * nested nnoremap <silent><Space>rp  :<C-u>Unite -resume -auto-preview grep<CR>

            au VimEnter * nested nnoremap <silent><Space>uy :<C-u>Unite history/yank<CR>
        aug END
    endif
'''
depends  = ['unite-outline', 'unite-gtags', 'neoyank.vim']


[[plugins]]
repo     = 'Shougo/unite-outline'
hook_add = '''
    " Â∏∏„Å´unite-outline„Çí„Å§„Åã„ÅÜ
    aug enableUniteOutline
        au!
        " with auto highlight
        au VimEnter * nested nnoremap <silent><Space>uO :<C-u>Unite -winwidth=50 -vertical -no-empty -no-quit -auto-highlight outline<CR>
        au VimEnter * nested nnoremap <silent><Space>uo :<C-u>Unite -winwidth=50 -vertical -no-empty outline<CR>
    aug END
'''


[[plugins]]
repo     = 'hewes/unite-gtags'
if       = '!has("python3")'
hook_add = '''
    nnoremap <silent><Space>gf :<C-u>Unite gtags/file<CR>
    nnoremap <silent><Space>gr :<C-u>Unite -resume -auto-preview gtags/ref<CR>
'''


[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
    " let g:indentLine_setColors = 0
'''


[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
    let quickrun_config = {
    \   "_" : {
    \       "outputter/buffer/close_on_empty" : 1,
    \       "runner" : "vimproc"
    \    },
    \   'phpunit': {
    \       'command':   'vendor/bin/phpunit',
    \       'exec':      '%c %s',
    \       'outputter': 'quickfix',
    \   },
    \   'plantuml': {
    \       'exec':      'java -jar /usr/share/plantuml/plantuml.jar -Djava.awt.headless=true -tsvg %s',
    \       'outputter': 'message'
    \   }
    \}

autocmd FileType php nnoremap <buffer> <Space>bt :<C-u>QuickRun phpunit<CR>
autocmd FileType php nnoremap <buffer> <Space>bl :<C-u>QuickRun -exec "php -l %s" -outputter "quickfix"<CR>

nnoremap <Leader>r :<C-u>QuickRun<CR>
'''


[[plugins]]
repo = 'tyru/eskk.vim'
rev  = '97f6138'
hook_add = '''
    let g:eskk#directory = "~/.skk"
    let g:eskk#dictionary = { 'path': "~/.skk-jisyo", 'sorted': 0, 'encoding': 'utf-8', }
    let g:eskk#large_dictionary = { 'path': "~/.skk/SKK-JISYO.L", 'sorted': 1, 'encoding': 'euc-jp', }
    set imdisable
    let g:eskk#enable_completion = 0
    let g:eskk#server = {
    \   'host': 'localhost',
    \   'port': 55100,
    \}
    " let g:eskk#marker_henkan         = 'ÔºÉ'
    " let g:eskk#marker_henkan_select  = 'Ôº†'
    let g:eskk#show_candidates_count = 2
    let g:eskk#show_annotation       = 1


    function! DisableCocNvim()
        if exists(':CocDisable') == 2
            CocDisable
        endif
    endfunction

    function! EnableCocNvim()
        if exists(':CocEnable') == 2
            CocEnable
        endif
    endfunction

    autocmd  User eskk-enable-post  call DisableCocNvim()
    autocmd  User eskk-disable-post call EnableCocNvim()
'''


[[plugins]]
repo = 'jwalton512/vim-blade'
hook_source = '''
    syntax on
    let g:blade_custom_directives = ['datetime', 'namespaced::directive']
    let g:blade_custom_directives_pairs = {'cache': 'endcache'}
'''


[[plugins]]
repo = 'aklt/plantuml-syntax'


[[plugins]]
repo = 'mattn/emmet-vim'
hook_add = '''
    let g:user_emmet_leader_key='<C-y>'
'''


[[plugins]]
repo = 'othree/html5.vim'


# [[plugins]] 
# repo     = 'fuenor/qfixhowm'
# hook_add = '''
#     let g:QFixHowm_Key      = '<Space>'
#     let g:QFixHowm_FileType = 'markdown'
#     let g:howm_dir          = '~/.howm'
#     let g:howm_filename     = '%Y%m%d_%H%M%S.md'
#     let g:howm_fileencoding = 'utf-8'
# '''


[[plugins]]
repo  = 'tpope/vim-repeat'


[[plugins]]
repo     = 'kana/vim-textobj-user'
hook_add = '''
    function! TextObjUserSetting()
        " „Å≤„Çâ„Åå„Å™„Éª„Ç´„Çø„Ç´„Éä
        call textobj#user#plugin('kana', {
                    \       '_' : {
                    \           'pattern' : '[„Éº„Éª\u3041-\u30FA]\+',
                    \           'select'  : ['ak', 'ik'],
                    \       },
                    \   })
        " PHP
        call textobj#user#plugin('php', {
                    \       'variable' : {
                    \           'pattern' : '\$\w\+',
                    \           'select'  : ['av', 'iv'],
                    \       },
                    \       'argument' : {
                    \           'pattern' : '\(\w\+\ \)\?\$\S\+\(, \?\)\?',
                    \           'select'  : ['aa', 'ia'],
                    \       },
                    \   })
        " Êó•‰ªòË°®Ë®ò„ÅÆÈÅ∏Êäû
        call textobj#user#plugin('datetime', {
                    \       'date' : {
                    \           'pattern' : '\<\d\{2,4\}[-\/]\d\d[-\/]\d\d\>',
                    \           'select'  : ['ad', 'id'],
                    \       },
                    \   })

        " „Ç≥„É°„É≥„ÉàÈÉ®ÂàÜ„ÅÆÈÅ∏Êäû
        call textobj#user#plugin('comment', {
                    \       '-' : {
                    \           'select-a-function' : 'WholeComment',
                    \           'select-a' : 'a/',
                    \       },
                    \   })

        function! WholeComment()
            normal! [/
            let head_pos = getpos('.')
            normal! ]/
            let tail_pos = getpos('.')
            return['v', head_pos, tail_pos]
        endfunction

        call textobj#user#plugin('line', {
                    \   '-': {
                    \     'select-a-function': 'CurrentLineA',
                    \     'select-a': 'al',
                    \     'select-i-function': 'CurrentLineI',
                    \     'select-i': 'il',
                    \   },
                    \ })

        function! CurrentLineA()
            normal! 0
            let head_pos = getpos('.')
            normal! $
            let tail_pos = getpos('.')
            return ['v', head_pos, tail_pos]
        endfunction

        function! CurrentLineI()
            normal! ^
            let head_pos = getpos('.')
            normal! g_
            let tail_pos = getpos('.')
            let non_blank_char_exists_p = getline('.')[head_pos[2] - 1] !~# '\s'
            return
                        \ non_blank_char_exists_p
                        \ ? ['v', head_pos, tail_pos]
                        \ : 0
        endfunction
    endfunction

    au VimEnter * nested call TextObjUserSetting()
'''


[[plugins]]
repo     = 'easymotion/vim-easymotion'



[[plugins]]
repo     = 'yokenzan/vim-easy-align'
rev      = 'customize'
hook_add = '''
    nmap ga <Plug>(EasyAlign)
    xmap ga <Plug>(EasyAlign)
    nmap gx visbga<C-l>1<CR><C-r>0<CR><C-x>\$<CR>
    xmap gx ga<C-l>1<CR><C-r>0<CR><C-x>\$<CR>
'''


[[plugins]]
repo     = 'osyo-manga/vim-textobj-multiblock'


[[plugins]]
repo    = 'roxma/vim-hug-neovim-rpc'
if      = '!has("nvim") && has("python3")'
depends = ['nvim-yarp']


[[plugins]]
repo = 'roxma/nvim-yarp'
if   = '!has("nvim") && has("python3")'


[[plugins]]
repo  = 'vim-vdebug/vdebug'
if    = 'has("python3")'
hook_post_source = '''
    let g:vdebug_options= {
    \    'port' : 9000,
    \    'timeout' : 20,
    \    'server' : 'localhost',
    \    'on_close' : 'stop',
    \    'break_on_open' : 1,
    \    'ide_key' : 'XDEBUG_VIM',
    \    'debug_window_level' : 0,
    \    'debug_file_level' : 0,
    \    'debug_file' : '',
    \    'path_maps' : {},
    \    'watch_window_style' : 'expanded',
    \    'marker_default' : '‚¨¶',
    \    'marker_closed_tree' : '‚ñ∏',
    \    'marker_open_tree' : '‚ñæ',
    \    'sign_breakpoint' : '‚ñ∑',
    \    'sign_current' : '‚ñ∂',
    \    'sign_disabled': 'X',
    \    'continuous_mode'  : 1,
    \    'simplified_status': 1,
    \    'layout': 'vertical',
    \}
'''


[[plugins]]
repo = 'kkoomen/vim-doge'

[[plugins]]
repo = 'Shougo/dein.vim'


[[plugins]]
repo = 'vim-jp/vimdoc-ja'
hook_add = '''
    set helplang=ja
'''


[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
    let g:ale_disable_lsp           = 1

    let g:ale_echo_msg_error_str    = 'üö´'
    let g:ale_echo_msg_warning_str  = '‚ö† '
    let g:ale_echo_msg_format       = '[%linter%] [%severity%] %s'

    let g:ale_sign_column_always    = 0
    let g:ale_sign_error            = 'AE'
    let g:ale_sign_warning          = 'AW'

    let g:ale_lint_on_save          = 1
    let g:ale_lint_on_enter         = 0
    let g:ale_set_quickfix          = 1
    let g:ale_lint_on_text_changed  = 0
    let g:ale_lint_on_insert_leave  = 0

    let g:ale_linters = {
                \ 'php': ['phpstan', 'phpcs']
                \ }
    let g:ale_fixers  = {
                \ 'python': ['isort', 'black','autopep8'],
                \ 'ruby':   ['rubocop'],
                \ 'php':    ['phpcbf']
                \ }

    let g:ale_php_phpcs_standard = 'PSR12'

    aug enableALEKeyMaps
        au!
        nmap <silent><Space>al :<C-u>ALELint<CR>
        nmap <silent><Space>ad :<C-u>ALEDetail<CR>
        nmap <silent><Space>af :<C-u>ALEFix<CR>
        nmap <silent><Space>aD :<C-u>ALEDisable<CR>
        nmap <silent><Space>ab :<C-u>ALEDisableBuffer<CR>
        nmap <silent>[a        :<C-u>ALEPrevious<CR>
        nmap <silent>]a        :<C-u>ALENext<CR>
        autocmd BufEnter,WinEnter *.csv,*.uke ALEDisableBuffer
    aug END
'''


[[plugins]]
repo = 'Shougo/context_filetype.vim'


[[plugins]]
repo = 'osyo-manga/vim-precious'


# [[plugins]]
# repo     = 'airblade/vim-gitgutter'
# if       = 'executable("git")'
# hook_add = '''
#     let s:gitgutter_sign_candidates         = ['„Çù', 'ÓÇ∞', '„Äá', '‚óè']
#     let s:gitgutter_sign_index              = 0
#
#     let s:gitgutter_sign_base               = s:gitgutter_sign_candidates[s:gitgutter_sign_index]
#     let g:gitgutter_sign_added              = s:gitgutter_sign_base
#     let g:gitgutter_sign_modified           = s:gitgutter_sign_base
#     let g:gitgutter_sign_removed            = s:gitgutter_sign_base
#     let g:gitgutter_sign_removed_first_line = s:gitgutter_sign_base
#     let g:gitgutter_sign_modified_removed   = s:gitgutter_sign_base
# '''


[[plugins]]
repo     = 'mhinz/vim-signify'
if       = 'executable("git") && (has("nvim") || has("patch-8.0.902"))'
hook_add = '''
'''


[[plugins]]
repo = 'tomtom/tcomment_vim'


[[plugins]]
repo = 'tpope/vim-surround'


[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
    let g:skk_mode_strings = {
                \ 'hira'    : '„ÅÇ',
                \ 'kata'    : '„Ç¢',
                \ 'hankata' : 'ÔΩ±_',
                \ 'zenkaku' : 'Ôº°',
                \ 'addrev'  : 'addrev',
                \ }
    function! SkkStatusline()
        try
            " return skkeleton#is_enabled()
            "             \ ? g:skk_mode_strings[skkeleton#mode()] . ' '
            "             \ : ''
            return ''
            " return eskk#is_enabled()
            "             \ ? g:eskk#statusline_mode_strings[eskk#get_mode()] . ' '
            "             \ : ''
        catch
            return ''
        endtry
    endfunction

    function! CocNvimStatusline()
        try
            return (exists("g:coc_enabled") && g:coc_enabled) ? 'Ë£ú ': ''
        catch
            return ''
        endtry
    endfunction

    function! ConcealLevelStatusLine()
        return &conceallevel == 2
                    \ ? 'Èö†'
                    \ : ''
    endfunction

    function! WrapStatusLine()
        return &wrap
                    \ ? 'Áï≥'
                    \ : ''
    endfunction

    function! SpellStatusLine()
        return &spell
                    \ ? 'Á≥æ'
                    \ : ''
    endfunction

    function! PasteStatusLine()
        return &paste
                    \ ? 'Ë≤º'
                    \ : ''
    endfunction

    function! AleStatusline()
        return (exists("g:ale_enabled") && g:ale_enabled) ? 'Ëß£' : ''
    endfunction

    function! Padspace()
        if &paste || &spell || &conceallevel == 2 || &wrap
            return ' '
        endif

        return ''
    endfunction

    function! NearestMethodOrFunction() abort
      let nearest = get(b:, 'vista_nearest_method_or_function', '')

      return nearest == '' ? '' : '[' . nearest . ']'
    endfunction

    let g:airline_mode_map = {
        \ '__'    : '-',
        \ 'n'     : 'N',
        \ 'niI'   : 'I(N)',
        \ 'niR'   : 'R(N)',
        \ 'niV'   : 'RV(N)',
        \ 'v'     : 'V',
        \ 'V'     : 'VL',
        \ ''    : 'VB',
        \ 's'     : 'S',
        \ 'S'     : 'SL',
        \ ''    : 'SB',
        \ 'i'     : 'I',
        \ 'ic'    : 'IC',
        \ 'ix'    : 'IX',
        \ 'R'     : 'R',
        \ 'Rc'    : 'RC',
        \ 'Rx'    : 'RX',
        \ 'Rv'    : 'RV',
        \ 'c'     : 'C',
        \ 'r'     : 'PROMPT',
        \ 'rm'    : 'MORE PROMPT',
        \ 't'     : 'T',
        \ 'multi' : 'M',
        \ 'no'    : 'OP PENDING',
        \ 'nov'   : 'OP PENDING CHAR',
        \ 'noV'   : 'OP PENDING LINE',
        \ 'no'  : 'OP PENDING BLOCK',
        \ 'cv'    : 'VIM EX',
        \ 'ce'    : 'EX',
        \ 'r?'    : 'CONFIRM',
        \ '!'     : 'SHELL',
        \ }
        " NB: no*, cv, ce, r? and ! do not actually display 

    let g:airline_powerline_fonts    = 0
    let g:airline_detect_crypt       = 0
    let g:airline_detect_iminsert    = 0
    let g:airline_detect_spell       = 0
    let g:airline_detect_spelllang   = 0
    let g:airline_highlighting_cache = 1
    let g:airline_inactive_collapse  = 0

    let g:airline#parts#ffenc#skip_expected_string = 'utf-8[unix]'

    let g:airline#extensions                       = []
    let g:airline#extensions#hunks#enabled         = 0
    let g:airline#extensions#whitespace#enabled    = 0
    let g:airline#extensions#tabline#enabled       = 0
    let g:airline#extensions#wordcount#enabled     = 0

    let g:airline_theme     = 'light'
    let g:airline_section_a = airline#section#create(['mode'])
    let g:airline_section_b = airline#section#create([
                \   '%{SkkStatusline()}', '%{CocNvimStatusline()}', '%{FugitiveHead()}', ' %n', '%{Padspace()}',
                \   '%{ConcealLevelStatusLine()}', '%{WrapStatusLine()}', '%{PasteStatusLine()}', '%{SpellStatusLine()}', '%{AleStatusline()}',
                \   '%{NearestMethodOrFunction()}'
                \   ])
    let g:airline_section_x = airline#section#create(['filetype'])
    let g:airline_section_z = airline#section#create(['%l/%L:%c'])

    let g:airline#extensions#default#layout = [
        \ ['a', 'b', 'c'],
        \ ['x', 'y', 'z'],
        \ ]
'''
depends = ['vim-airline-themes']


[[plugins]]
repo = 'vim-airline/vim-airline-themes'


[[plugins]]
repo     = 'tpope/vim-fugitive'
if       = 'executable("git")'
hook_add = '''
    nnoremap <Space>fs :<C-u>belowright Git<CR>
    nnoremap <Space>fr :<C-u>Gread<CR>
    nnoremap <Space>fb :<C-u>Git blame<CR>
    nnoremap <Space>fd :<C-u>Gdiff<CR>
'''


[[plugins]]
repo = 'tpope/vim-rhubarb'


[[plugins]]
repo = 'tommcdo/vim-fubitive'


[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'


[[plugins]]
repo = 'tpope/vim-dispatch'


[[plugins]]
repo = 'bkad/CamelCaseMotion'
hook_add = '''
    map  <silent>]w  <Plug>CamelCaseMotion_w
    map  <silent>]b  <Plug>CamelCaseMotion_b
    map  <silent>]e  <Plug>CamelCaseMotion_e
    omap <silent>]iw <Plug>CamelCaseMotion_iw
    vmap <silent>]iw <Plug>CamelCaseMotion_iw
    omap <silent>]ib <Plug>CamelCaseMotion_ib
    vmap <silent>]ib <Plug>CamelCaseMotion_ib
    omap <silent>]ie <Plug>CamelCaseMotion_ie
    vmap <silent>]ie <Plug>CamelCaseMotion_ie
'''


[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
    " let g:indentLine_setColors = 0
'''


[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
    let g:quickrun_config = {
    \   "_" : {
    \       "outputter/buffer/close_on_empty" : 1,
    \       "runner" : "vimproc"
    \    },
    \   'phpunit': {
    \       'command':   'vendor/bin/phpunit',
    \       'exec':      '%c %s',
    \       'outputter': 'quickfix',
    \   },
    \   'plantuml': {
    \       'exec':      'java -jar /usr/share/plantuml/plantuml.jar -Djava.awt.headless=true -tsvg %s',
    \       'outputter': 'message'
    \   },
    \   'python': {
    \       'command':   'python3'
    \   },
    \   'uke': {
    \       'hook/cd/directory':           '~/wk/repos/receiptisan-v0.1',
    \       'exec':                        '%c %o %a %s',
    \       'command':                     'bundle',
    \       'cmdopt':                      'exec exe/recediff',
    \       'args':                        '--preview --color --from=0',
    \       'runner':                      'terminal',
    \       'runner/terminal/opener':      'new',
    \       'runner/terminal/into':        1,
    \       'hook/output_encode/encoding': 'cp932:cp932'
    \   },
    \   'typescript': {
    \       'exec':      'npx ts-node %s'
    \   }
    \}

    " \   'javascript': {
    " \       'command':   '/mnt/c/Windows/System32/cscript.exe',
    " \       'exec':      '%c %o %{!wslpath -w %s}',
    " \       'cmdopt':    '//NoLogo',
    " \   },

nnoremap <Leader>r :<C-u>QuickRun<CR>
xnoremap <Leader>r :<C-u>'<,'>QuickRun<CR>
'''




[[plugins]]
repo = 'mattn/emmet-vim'
hook_add = '''
    let g:user_emmet_leader_key='<C-y>'
'''


[[plugins]]
repo  = 'tpope/vim-repeat'


[[plugins]]
repo     = 'kana/vim-textobj-user'
hook_add = '''
    function! TextObjUserSetting()
        " „Å≤„Çâ„Åå„Å™„Éª„Ç´„Çø„Ç´„Éä
        call textobj#user#plugin('kana', {
                    \       '_' : {
                    \           'pattern' : '[„Éº„Éª\u3041-\u30FA]\+',
                    \           'select'  : ['ak', 'ik'],
                    \       },
                    \   })
        " PHP
        call textobj#user#plugin('php', {
                    \       'variable' : {
                    \           'pattern' : '\$\w\+',
                    \           'select'  : ['av', 'iv'],
                    \       },
                    \       'argument' : {
                    \           'pattern' : '\(\w\+\ \)\?\$\S\+\(, \?\)\?',
                    \           'select'  : ['aa', 'ia'],
                    \       },
                    \   })
        " Êó•‰ªòË°®Ë®ò„ÅÆÈÅ∏Êäû
        call textobj#user#plugin('datetime', {
                    \       'date' : {
                    \           'pattern' : '\<\d\{2,4\}[-\/]\d\d[-\/]\d\d\>',
                    \           'select'  : ['ad', 'id'],
                    \       },
                    \   })

        " „Ç≥„É°„É≥„ÉàÈÉ®ÂàÜ„ÅÆÈÅ∏Êäû
        call textobj#user#plugin('comment', {
                    \       '-' : {
                    \           'select-a-function' : 'WholeComment',
                    \           'select-a' : 'a/',
                    \       },
                    \   })

        function! WholeComment()
            normal! [/
            let head_pos = getpos('.')
            normal! ]/
            let tail_pos = getpos('.')
            return['v', head_pos, tail_pos]
        endfunction

        call textobj#user#plugin('line', {
                    \   '-': {
                    \     'select-a-function': 'CurrentLineA',
                    \     'select-a': 'al',
                    \     'select-i-function': 'CurrentLineI',
                    \     'select-i': 'il',
                    \   },
                    \ })

        function! CurrentLineA()
            normal! 0
            let head_pos = getpos('.')
            normal! $
            let tail_pos = getpos('.')
            return ['v', head_pos, tail_pos]
        endfunction

        function! CurrentLineI()
            normal! ^
            let head_pos = getpos('.')
            normal! g_
            let tail_pos = getpos('.')
            let non_blank_char_exists_p = getline('.')[head_pos[2] - 1] !~# '\s'
            return
                        \ non_blank_char_exists_p
                        \ ? ['v', head_pos, tail_pos]
                        \ : 0
        endfunction
    endfunction

    au VimEnter * nested call TextObjUserSetting()
'''


[[plugins]]
repo     = 'easymotion/vim-easymotion'


[[plugins]]
repo     = 'yokenzan/vim-easy-align'
rev      = 'customize'
hook_add = '''
    nmap ga <Plug>(EasyAlign)
    xmap ga <Plug>(EasyAlign)
    nmap gx visbga<C-l>1<CR><C-r>0<CR><C-x>\$<CR>
    xmap gx ga<C-l>1<CR><C-r>0<CR><C-x>\$<CR>
'''


[[plugins]]
repo     = 'osyo-manga/vim-textobj-multiblock'


[[plugins]]
repo    = 'roxma/vim-hug-neovim-rpc'
if      = '!has("nvim") && has("python3")'
depends = ['nvim-yarp']


[[plugins]]
repo = 'roxma/nvim-yarp'
if   = '!has("nvim") && has("python3")'


[[plugins]]
repo = 'vim-test/vim-test'
hook_add = '''
    let g:test#preserve_screen = 1
    let g:test#strategy = 'dispatch'
'''


[[plugins]]
repo = 'DanilaMihailov/beacon.nvim'
hook_add = '''
    let g:beacon_size    = 100
    let g:beacon_timeout = 400
'''


[[plugins]]
repo = 'raghur/vim-ghost'


[[plugins]]
repo = 'gaving/vim-textobj-argument'

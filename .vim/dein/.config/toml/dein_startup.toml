[[plugins]]
repo = 'vim-jp/vimdoc-ja'
hook_add = '''
    set helplang=ja
'''


[[plugins]]
repo = 'thinca/vim-ref'
hook_add = '''
    let g:ref_phpmanual_path = $HOME . '/.vim/ref/php-chunked-xhtml'
    let g:ref_detect_filetype = {
    \       'php' : 'phpmanual'
    \}

    let g:ref_source_webdict_sites = {
    \   'wiki': {
    \     'url': 'http://ja.wikipedia.org/wiki/%s',
    \   },
    \   'ee': {
    \     'url': 'http://googledictionary.freecollocation.com/meaning?word=%s',
    \   },
    \ }

    "デフォルト
    let g:ref_source_webdict_sites.default = 'ee'

    function! g:ref_source_webdict_sites.ee.filter(output)
      return join(split(a:output, "\n")[5 :], "\n")
    endfunction

    function! g:ref_source_webdict_sites.wiki.filter(output)
      return join(split(a:output, "\n")[5 :], "\n")
    endfunction

    nnoremap <Space>re :<C-u>Ref webdict ee
    nnoremap <Space>rw :<C-u>Ref webdict wiki
    nnoremap <Space>rp :<C-u>Ref phpmanual
'''


[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
    let g:ale_sign_column_always    = 1
    let g:ale_sign_error            = '!!'

    let g:ale_lint_on_save          = 1
    let g:ale_lint_on_enter         = 0
    let g:ale_lint_on_text_changed  = 0
    let g:ale_lint_on_insert_leave  = 0

    let g:ale_set_quickfix          = 0
'''


[[plugins]]
repo = 'Shougo/context_filetype.vim'


[[plugins]]
repo = 'osyo-manga/vim-precious'


[[plugins]]
repo = 'airblade/vim-gitgutter'


[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
    aug enableNERDTree
        au!
        au VimEnter * nested noremap <Space>nt :NERDTreeToggle<Return>
        au VimEnter * nested noremap <Space>nc :NERDTreeCWD<Return>
    aug END
'''


[[plugins]]
repo = 'tomtom/tcomment_vim'


[[plugins]]
repo = 'tpope/vim-surround'


[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
    let g:airline_powerline_fonts  = 0
    let g:airline_detect_crypt     = 0
    let g:airline_detect_iminsert  = 0
    let g:airline_detect_spell     = 0
    let g:airline_detect_spelllang = 0

    let g:airline#extensions                    = []
    let g:airline#extensions#hunks#enabled      = 0
    let g:airline#extensions#whitespace#enabled = 0

    let g:airline#extensions#tabline#enabled = 0
    let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
    let g:airline#extensions#tabline#buffer_idx_mode = 0

    let g:airline_theme     = 'light'
    let g:airline_section_a = airline#section#create(['mode', 'paste', 'branch'])
    let g:airline_section_x = airline#section#create(['filetype'])
    let g:airline_section_z = airline#section#create(['L%l C%c %P'])

    let g:airline#extensions#default#layout = [
        \ ['a', 'b', 'c'],
        \ ['x', 'y', 'z']
        \ ]
'''
depends = ['vim-airline-themes']


[[plugins]]
repo = 'vim-airline/vim-airline-themes'


[[plugins]]
repo = 'tpope/vim-fugitive'


[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'


[[plugins]]
repo = 'tpope/vim-dispatch'


[[plugins]]
repo = 'Shougo/neomru.vim'


[[plugins]]
repo = 'bkad/CamelCaseMotion'
hook_add = '''
    map  <silent> ]w <Plug>CamelCaseMotion_w
    map  <silent> ]b <Plug>CamelCaseMotion_b
    map  <silent> ]e <Plug>CamelCaseMotion_e
    omap <silent> ]iw <Plug>CamelCaseMotion_iw
    vmap <silent> ]iw <Plug>CamelCaseMotion_iw
    omap <silent> ]ib <Plug>CamelCaseMotion_ib
    vmap <silent> ]ib <Plug>CamelCaseMotion_ib
    omap <silent> ]ie <Plug>CamelCaseMotion_ie
    vmap <silent> ]ie <Plug>CamelCaseMotion_ie
'''


[[plugins]]
repo = 'kana/vim-textobj-user'
hook_add = '''
    " 日付表記の選択
    call textobj#user#plugin('datetime', {
                \       'date' : {
                \           'pattern' : '\<\d\{2,4\}[-\/]\d\d[-\/]\d\d\>',
                \           'select'  : ['ad', 'id'],
                \       },
                \   })

    " コメント部分の選択
    call textobj#user#plugin('comment', {
                \       '-' : {
                \           'select-a-function' : 'WholeComment',
                \           'select-a' : 'a/',
                \       },
                \   })

    function! WholeComment()
        normal! [/
        let head_pos = getpos('.')
        normal! ]/
        let tail_pos = getpos('.')
        return['v', head_pos, tail_pos]
    endfunction
'''


[[plugins]]
repo     = 'Shougo/denite.nvim'
if       = 'has("python3")'
hook_add = '''
    aug enableDeniteKeyMap
        au!
        au VimEnter * nested nnoremap <silent> <Space>uh  :<C-u>Denite help<CR>
        au VimEnter * nested nnoremap <silent> <Space>ub  :<C-u>Denite -matchers=matcher/substring -mode=normal buffer<CR>
        au VimEnter * nested nnoremap <silent> <Space>ur  :<C-u>Denite -matchers=matcher/substring -mode=normal register<CR>
        au VimEnter * nested nnoremap <silent> <Space>uy  :<C-u>Denite -matchers=matcher/substring -mode=normal neoyank<CR>
        au VimEnter * nested nnoremap <silent> <Space>uj  :<C-u>Denite -matchers=matcher/substring -mode=normal jump<CR>
        au VimEnter * nested nnoremap <silent> <Space>q:  :<C-u>Denite -mode=normal -reversed command_history<CR>
        au VimEnter * nested nnoremap <silent> <Space>ul  :<C-u>Denite -mode=insert -auto-resize line<CR>

        " ファイル関係
        au VimEnter * nested nnoremap <silent> <Space>uf  :<C-u>DeniteBufferDir -matchers=matcher/substring -mode=normal file<CR>
        au VimEnter * nested nnoremap <silent> <Space>uc  :<C-u>Denite          -matchers=matcher/substring -mode=normal file<CR>
        au VimEnter * nested nnoremap <silent> <Space>um  :<C-u>Denite          -matchers=matcher/substring -mode=normal file_mru<CR>
        au VimEnter * nested nnoremap <silent> <Space>ug  :<C-u>Denite          -matchers=matcher/substring -mode=normal file_rec/git<CR>
        au VimEnter * nested nnoremap <silent> <Space>ua  :<C-u>Denite          -matchers=matcher/substring -mode=normal file_rec<CR>

        " grep関係
        au VimEnter * nested nnoremap <silent> <Space>gg  :<C-u>Denite -no-empty grep/git<CR>
        au VimEnter * nested nnoremap <silent> <Space>gp  :<C-u>Denite -no-empty grep<CR>

        " 検索結果の再表示と移動
        au VimEnter * nested nnoremap <silent> <Space>ur  :<C-u>Denite -resume<CR>
        au VimEnter * nested nnoremap <silent> <Space>up  :<C-u>Denite -resume -select=-1 -immediately<CR>
        au VimEnter * nested nnoremap <silent> <Space>un  :<C-u>Denite -resume -select=+1 -immediately<CR>
    aug END

    call denite#custom#map(
                \ 'insert', '<C-n>', '<denite:move_to_next_line>',     'noremap'
                \)
    call denite#custom#map(
                \ 'insert', '<C-p>', '<denite:move_to_previous_line>', 'noremap'
                \)

    call denite#custom#alias('source', 'file_rec/git', 'file_rec')
    call denite#custom#var('file_rec/git', 'command',
                \ ['git', 'ls-files', '-co', '--exclude-standard']
                \)

    call denite#custom#alias('source', 'grep/git', 'grep')
    call denite#custom#var('grep/git', 'command',
                \ ['git', 'grep']
                \)
    call denite#custom#var('grep/git', 'recursive_opts', [])
    call denite#custom#var('grep/git', 'pattern_opt',    [])
    " call denite#custom#var('grep/git', 'default_opts',   ['--no-color'])

    call denite#custom#option('default', 'prompt', '$')
'''
depends  = ['neoyank',  'unite-outline']


[[plugins]]
repo     = 'Shougo/unite.vim'
hook_add = '''
    if !has('python3')
        let g:unite_split_rule = 'rightbelow'
        let g:unite_winwidth   = 45
        let g:unite_source_history_yank_enable = 1
        let g:unite_source_file_mru_limit      = 1000

        aug enableUniteKeyBindingsUnlessHasPython
            au!
            au VimEnter * nested nnoremap <silent> <Space>ut  :<C-u>Unite tab<CR>
            au VimEnter * nested nnoremap <silent> <Space>ub  :<C-u>Unite buffer<CR>
            au VimEnter * nested nnoremap <silent> <Space>ur  :<C-u>Unite -buffer-name=register register<CR>
            au VimEnter * nested nnoremap <silent> <Space>uj  :<C-u>Unite jump<CR>
            " ファイル関係
            au VimEnter * nested nnoremap <silent> <Space>um  :<C-u>Unite file_mru<CR>
            au VimEnter * nested nnoremap <silent> <Space>ug  :<C-u>Unite -buffer-name=files file_rec/git<CR>
            au VimEnter * nested nnoremap <silent> <Space>ua  :<C-u>Unite -buffer-name=files file_rec<CR>
            au VimEnter * nested nnoremap <silent> <Space>uf  :<C-u>UniteWithBufferDir  -buffer-name=files file<CR>
            au VimEnter * nested nnoremap <silent> <Space>uc  :<C-u>UniteWithCurrentDir -buffer-name=files file<CR>
            " grep関係
            au VimEnter * nested nnoremap <silent> <Space>gg  :<C-u>Unite -auto-preview grep/git<CR>
            au VimEnter * nested nnoremap <silent> <Space>gp  :<C-u>Unite -auto-preview grep<CR>
            au VimEnter * nested nnoremap <silent> <Space>rg  :<C-u>Unite -resume -auto-preview grep/git<CR>
            au VimEnter * nested nnoremap <silent> <Space>rp  :<C-u>Unite -resume -auto-preview grep<CR>

            au VimEnter * nested nnoremap <Space>uy :<C-u>Unite history/yank<CR>
        aug END
    endif
'''
depends  = ['neoyank', 'unite-outline', 'unite-gtags', 'neoyank.vim']


[[plugins]]
repo     = 'Shougo/unite-outline'
hook_add = '''
    " 常にunite-outlineをつかう
    aug enableUniteOutline
        au!
        au VimEnter * nested nnoremap <Space>uo :<C-u>Unite -vertical outline<CR>
    aug END
'''


[[plugins]]
repo     = 'Shougo/neoyank.vim'


[[plugins]]
repo     = 'hewes/unite-gtags'
if       = '!has("python3")'
hook_add = '''
    " nnoremap <silent> <Space>gc :<C-u>Unite -resume -auto-preview gtags/context<CR>
    nnoremap <silent> <Space>gf :<C-u>Unite gtags/file<CR>
    " nnoremap <silent> <Space>gd :<C-u>Unite -resume -auto-preview gtags/def<CR>
    nnoremap <silent> <Space>gr :<C-u>Unite -resume -auto-preview gtags/ref<CR>
'''



[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
    " let g:indentLine_setColors = 0
'''


[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
    let quickrun_config = {
    \   "_" : {
    \       "outputter/buffer/close_on_empty" : 1,
    \       "runner" : "vimproc"
    \   }
    \}
    aug enableQuickRun
        au!
        au VimEnter * nested noremap <Space>qr :<C-u>QuickRun<CR>
    aug END
'''


[[plugins]]
repo = 'osyo-manga/vim-textobj-multiblock'


[[plugins]]
repo = 'itchyny/thumbnail.vim'
hook_add = '''
    aug enableThumbnail
        au!
        au VimEnter * nested noremap <Space>th :<C-u>Thumbnail<CR>
    aug END
'''


[[plugins]]
repo = 'tyru/eskk.vim'
hook_add = '''
    let g:eskk#directory = "~/.skk"
    let g:eskk#dictionary = { 'path': "~/.skk-jisyo", 'sorted': 0, 'encoding': 'utf-8', }
    let g:eskk#large_dictionary = { 'path': "~/.skk/SKK-JISYO.L", 'sorted': 1, 'encoding': 'euc-jp', }
    set imdisable
    let g:eskk#enable_completion = 1
    let g:eskk#server = {
    \   'host': 'localhost',
    \   'port': 55100,
    \}
'''


[[plugins]]
repo = 'jwalton512/vim-blade'
hook_source = '''
    syntax on
    let g:blade_custom_directives = ['datetime', 'namespaced::directive']
    let g:blade_custom_directives_pairs = {'cache': 'endcache'}
'''


[[plugins]]
repo = 'aklt/plantuml-syntax'


[[plugins]]
repo = 'mattn/emmet-vim'


[[plugins]]
repo = 'othree/html5.vim'


[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
if   = '!has("nvim")'


[[plugins]]
repo = 'roxma/nvim-yarp'
if   = '!has("nvim")'


[[plugins]]
repo     = 'ncm2/ncm2'
if       = 'has("python3")'
hook_add = '''
    autocmd BufEnter * call ncm2#enable_for_buffer()
    set completeopt=noinsert,menuone,noselect
    set shortmess+=c
'''


[[plugins]]
repo    = 'prabirshrestha/async.vim'
if      = 'has("python3")'
depends = ['vim-lsp']


[[plugins]]
repo     = 'prabirshrestha/vim-lsp'
if       = 'has("python3")'
hook_add = '''
    if executable('solargraph')
        " gem install solargraph
        au User lsp_setup call lsp#register_server({
            \ 'name': 'solargraph',
            \ 'cmd': {server_info->[&shell, &shellcmdflag, 'solargraph stdio']},
            \ 'initialization_options': {"diagnostics": "true"},
            \ 'whitelist': ['ruby'],
            \ })
    endif
'''
depends  = ['ncm2-vim-lsp']


[[plugins]]
repo = 'ncm2/ncm2-vim-lsp'
if   = 'has("python3")'


[[plugins]] 
repo     = 'fuenor/qfixhowm'
hook_add = '''
    let QFixHowm_Key      = 'g'
    let QFixHowm_FileType = 'markdown'
    let howm_dir          = '~/.howm'
    let howm_filename     = '%Y%m%d_%H%M%S.md'
    let howm_fileencoding = 'utf-8'
'''


# colorschemes


[[plugins]]
repo = 'sjl/badwolf'


[[plugins]]
repo = 'tomasr/molokai'


[[plugins]]
repo = 'felipesousa/rupza'


[[plugins]]
repo = 'w0ng/vim-hybrid'


[[plugins]]
repo = 'GGalizzi/cake-vim'


[[plugins]]
repo = 'sickill/vim-monokai'


[[plugins]]
repo = 'vim-scripts/phd'


[[plugins]]
repo = 'NLKNguyen/papercolor-theme'


[[plugins]]
repo = 'morhetz/gruvbox'
hook_add = '''
    let g:gruvbox_contrast_light="hard"
'''


[[plugins]]
repo = 'Lokaltog/vim-distinguished'


[[plugins]]
repo = 'Shougo/dein.vim'


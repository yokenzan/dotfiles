[[plugins]]
repo = 'Shougo/neosnippet.vim'
on_i = 1
hook_add = '''
    imap <C-l> <Plug>(neosnippet_expand_or_jump)
    smap <C-l> <Plug>(neosnippet_expand_or_jump)
    xmap <C-l> <Plug>(neosnippet_expand_target)
'''


[[plugins]]
repo = 'OmniSharp/omnisharp-roslyn'
on_i = 1


[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_i = 1


[[plugins]]
repo  = 'OmniSharp/omnisharp-vim'
on_ft = ['cs']
on_i  = 1
if    = 'has("python")'
hook_source = '''
    let g:OmniSharp_server_path = '~/.vim/dein/repos/github.com/OmniSharp/omnisharp-server/OmniSharp/bin/Debug/OmniSharp'
    let g:OmniSharp_selector_ui = 'unite'
    let g:OmniSharp_start_server = 1
    let g:Omnisharp_stop_server = 2
    if has('win32unix')
        let g:OmniSharp_translate_cygwin_wsl = 1
    endif
'''


[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml', 'conf']


[[plugins]]
repo = 'tpope/vim-rails'
on_ft = ['ruby', 'eruby']


[[plugins]]
repo = 'rhysd/vim-textobj-ruby'
on_ft = ['ruby', 'eruby']
if = 'has("ruby")'
hook_source = '''
    let g:textobj_ruby_more_mappings = 1
'''


[[plugins]]
repo = 'vim-ruby/vim-ruby'
on_ft = ['ruby', 'eruby']
if = 'has("ruby")'
hook_source = '''
    let g:rubycomplete_buffer_loading = 1
    let g:rubycomplete_classes_in_global = 1
    let g:rubycomplete_rails = 1
'''


[[plugins]]
repo = 'tpope/vim-endwise'
on_ft = ['ruby', 'eruby']
on_i = 1


[[plugins]]
repo = 'joonty/vdebug'
if = 'has("python3")'
on_ft = ['php']
hook_post_source = '''
    let g:vdebug_options= {
    \    "port" : 9000,
    \    "server" : '',
    \    "timeout" : 20,
    \    "on_close" : 'detach',
    \    "break_on_open" : 0,
    \    "ide_key" : 'XDEBUG_VIM',
    \    "path_maps" : {},
    \    "debug_window_level" : 0,
    \    "debug_file_level" : 0,
    \    "debug_file" : "",
    \    "watch_window_style" : 'expanded',
    \    "marker_default" : '⬦',
    \    "marker_closed_tree" : '▸',
    \    "marker_open_tree" : '▾'
    \}
'''


[[plugins]]
repo = 'justmao945/vim-clang'
on_ft = ['c', 'cpp']
hook_add = '''
    let g:clang_c_completeopt   = 'menuone'
    let g:clang_cpp_completeopt = 'menuone'
'''


[[plugins]]
repo = 'phpactor/phpactor'
on_ft = ['php']
build = 'composer install'
hook_add = '''
    function! DefinitionJumpWithPhpactor()
        split
        call phpactor#GotoDefinition()
    endfunction

    aug enablePhpactorKeyBindings
        au!
        " Include use statement
        nmap <UniteKeyBindingsLeader>u :<C-u>call phpactor#UseAdd()<CR>
        " Invoke the context menu
        nmap <Leader>mm :<C-u>call phpactor#ContextMenu()<CR>
        " Invoke the navigation menu
        nmap <Leader>nn :<C-u>call phpactor#Navigate()<CR>
        " Goto definition of class or class member under the cursor
        nmap <Leader>o :<C-u>call phpactor#GotoDefinition()<CR>
        " Goto definition of class or class member under the cursor
        nmap <C-w><Leader>o :<C-u>call DefinitionJumpWithPhpactor()<CR>
        " Transform the classes in the current file
        nmap <Leader>tt :<C-u>call phpactor#Transform()<CR>
        " Generate a new class (replacing the current file)
        nmap <Leader>cc :<C-u>call phpactor#ClassNew()<CR>
        " Extract expression (normal mode)
        nmap <silent><Leader>ee :<C-u>call phpactor#ExtractExpression(v:false)<CR>
        " Extract expression from selection
        vmap <silent><Leader>ee :<C-u>call phpactor#ExtractExpression(v:true)<CR>
        " Extract method from selection
        vmap <silent><Leader>em :<C-u>call phpactor#ExtractMethod()<CR>
    aug END
'''


[[plugins]]
repo  = 'kristijanhusak/deoplete-phpactor'
on_ft = ['php']
hook_add = '''
    " let g:deoplete#sources = {}
    " let g:deoplete#sources.php = ['omni', 'phpactor', 'ultisnips', 'buffer']
'''


[[plugins]]
repo  = 'cespare/vim-toml'
on_ft = ['toml', 'conf']


[[plugins]]
repo  = 'vim-vdebug/vdebug'
if    = 'has("python3") && executable("php")'
on_ft = ['php']
hook_post_source = '''
    let g:vdebug_options= {
    \    "port" : 9000,
    \    "server" : '',
    \    "timeout" : 20,
    \    "on_close" : 'detach',
    \    "break_on_open" : 0,
    \    "ide_key" : 'XDEBUG_VIM',
    \    "path_maps" : {},
    \    "debug_window_level" : 0,
    \    "debug_file_level" : 0,
    \    "debug_file" : "",
    \    "watch_window_style" : 'expanded',
    \    "marker_default" : '⬦',
    \    "marker_closed_tree" : '▸',
    \    "marker_open_tree" : '▾'
    \}
'''


[[plugins]]
repo  = 'phpactor/phpactor'
if    = 'executable("php")'
on_ft = ['php']
build = 'composer install'
hook_add = '''
    let g:phpactorBranch               = 'develop'
    let g:phpactorOmniAutoClassImport  = v:true
    let g:phpactorCompletionIgnoreCase = 0


    function! DefinitionJumpWithPhpactor()
        split
        call phpactor#GotoDefinition()
    endfunction

    aug enablePhpactorKeyBindings
        au!
        " Include use statement
        nmap <Leader>u :<C-u>call phpactor#UseAdd()<CR>
        " Invoke the context menu
        nmap <Leader>mm :<C-u>call phpactor#ContextMenu()<CR>
        " Invoke the navigation menu
        nmap <Leader>nn :<C-u>call phpactor#Navigate()<CR>
        " Goto definition of class or class member under the cursor
        nmap <Leader>o :<C-u>call phpactor#GotoDefinition()<CR>
        " Goto definition of class or class member under the cursor
        nmap <C-w><Leader>o :<C-u>call DefinitionJumpWithPhpactor()<CR>
        " Transform the classes in the current file
        nmap <Leader>tt :<C-u>call phpactor#Transform()<CR>
        " Generate a new class (replacing the current file)
        nmap <Leader>cc :<C-u>call phpactor#ClassNew()<CR>
        " Extract expression (normal mode)
        nmap <silent><Leader>ee :<C-u>call phpactor#ExtractExpression(v:false)<CR>
        " show Full namespace of class under cursor
        nmap <silent><Leader>hh :<C-u>call phpactor#Hover()<CR>
        " Extract expression from selection
        vmap <silent><Leader>ee :<C-u>call phpactor#ExtractExpression(v:true)<CR>
        " Extract method from selection
        vmap <silent><Leader>em :<C-u>call phpactor#ExtractMethod()<CR>
    aug END
'''


[[plugins]]
repo  = 'phpactor/ncm2-phpactor'
if    = 'executable("php")'
on_ft = ['php']
on_i  = 1


[[plugins]]
repo     = 'Shougo/denite.nvim'
on_cmd   = ['Denite', 'DeniteBufferDir', 'DeniteProjectDir', 'DeniteCursorWord']
if       = 'has("python3")'
hook_add = '''
    aug enableDeniteKeyMap
        au!
        au VimEnter * nested nnoremap <silent><Space>uR  :<C-u>Denite -matchers=matcher/substring -smartcase -mode=normal register<CR>
        au VimEnter * nested nnoremap <silent><Space>uy  :<C-u>Denite -matchers=matcher/substring -smartcase -mode=normal neoyank<CR>
        au VimEnter * nested nnoremap <silent><Space>uh  :<C-u>Denite -smartcase help<CR>
        au VimEnter * nested nnoremap <silent><Space>ub  :<C-u>Denite -default-action=switch -matchers=matcher/substring -smartcase -mode=normal buffer<CR>
        au VimEnter * nested nnoremap <silent><Space>uj  :<C-u>Denite -default-action=switch -matchers=matcher/substring -smartcase -mode=normal -auto-preview jump<CR>
        au VimEnter * nested nnoremap <silent><Space>uM  :<C-u>Denite -default-action=switch -matchers=matcher/substring -smartcase -mode=normal -auto-preview mark<CR>

        au VimEnter * nested nnoremap <silent><Space>ul  :<C-u>Denite           -matchers=matcher/substring -auto-highlight -smartcase -mode=insert -auto-resize line<CR>
        au VimEnter * nested nnoremap <silent><Space>*   :<C-u>DeniteCursorWord -matchers=matcher/substring -auto-highlight -smartcase -mode=normal line<CR>

        au VimEnter * nested nnoremap <silent><Space>q:  :<C-u>Denite -mode=normal -smartcase -reversed command_history<CR>

        " ファイル関係
        au VimEnter * nested nnoremap <silent><Space>uf  :<C-u>DeniteBufferDir  -default-action=switch -no-empty -matchers=matcher/substring -smartcase -mode=normal file<CR>
        au VimEnter * nested nnoremap <silent><Space>uc  :<C-u>DeniteProjectDir -default-action=switch -no-empty -matchers=matcher/substring -smartcase -mode=normal file<CR>
        au VimEnter * nested nnoremap <silent><Space>um  :<C-u>Denite           -default-action=switch -no-empty -matchers=matcher/substring -smartcase -mode=normal file_mru<CR>
        au VimEnter * nested nnoremap <silent><Space>ua  :<C-u>Denite           -default-action=switch -no-empty -matchers=matcher/substring -smartcase -mode=normal file/rec<CR>
        au VimEnter * nested nnoremap <silent><Space>ug  :<C-u>DeniteProjectDir -default-action=switch -no-empty -matchers=matcher/substring -smartcase -mode=normal file/git<CR>

        " grep関係
        au VimEnter * nested nnoremap <silent><Space>gg  :<C-u>Denite           -no-empty -matchers=matcher/substring -smartcase -mode=normal -auto-preview   grep/git<CR>
        au VimEnter * nested nnoremap <silent><Space>gG  :<C-u>Denite           -no-empty -matchers=matcher/substring -smartcase -mode=normal -auto-highlight grep/git<CR>
        au VimEnter * nested nnoremap <silent><Space>gp  :<C-u>Denite           -no-empty -matchers=matcher/substring -smartcase -mode=normal -auto-preview   grep<CR>
        au VimEnter * nested nnoremap <silent><Space>gP  :<C-u>Denite           -no-empty -matchers=matcher/substring -smartcase -mode=normal -auto-highlight grep<CR>

        " Laravel関係
        au VimEnter * nested nnoremap <silent><Space>rl  :<C-u>Denite           -no-empty -matchers=matcher/substring -smartcase -mode=normal -auto-preview -vertical-preview grep:~/.vim/ref/laravel.doc/translation-ja/<CR>
        au VimEnter * nested nnoremap <silent><Space>rL  :<C-u>Denite           -no-empty -matchers=matcher/substring -smartcase -mode=normal -auto-preview -vertical-preview file/rec:~/.vim/ref/laravel.doc/original-en<CR>

        " git
        au VimEnter * nested nnoremap <silent><Space>gl  :<C-u>Denite -no-empty -matchers=matcher/substring -smartcase -mode=normal -auto-preview gitlog<CR>
        au VimEnter * nested nnoremap <silent><Space>gs  :<C-u>Denite -no-empty -matchers=matcher/substring -smartcase -mode=normal -auto-preview gitstatus<CR>
        au VimEnter * nested nnoremap <silent><Space>gb  :<C-u>Denite -no-empty -matchers=matcher/substring -smartcase -mode=normal -auto-preview gitbranch<CR>

        " 検索結果の再表示と移動
        au VimEnter * nested nnoremap <silent><Space>ur  :<C-u>Denite -resume -no-empty<CR>
        au VimEnter * nested nnoremap <silent>[u         :<C-u>Denite -resume -no-empty -select=-1 -immediately<CR>
        au VimEnter * nested nnoremap <silent>]u         :<C-u>Denite -resume -no-empty -select=+1 -immediately<CR>
    aug END
'''
hook_post_source = '''
    call denite#custom#map(
                \ 'insert', '<C-n>', '<denite:move_to_next_line>',      'noremap'
                \)
    call denite#custom#map(
                \ 'insert', '<C-p>', '<denite:move_to_previous_line>',  'noremap'
                \)
    call denite#custom#map(
                \ 'insert', '<C-s>', '<denite:do_action:switch>',       'noremap'
                \)
    call denite#custom#map(
                \ 'insert', '<C-t>', '<denite:do_action:tabswitch>',    'noremap'
                \)
    call denite#custom#map(
                \ 'normal', 'M',     '<denite:move_to_middle>',         'noremap'
                \)
    call denite#custom#map(
                \ 'normal', 's',     '<denite:do_action:splitswitch>',  'noremap'
                \)
    call denite#custom#map(
                \ 'normal', 'v',     '<denite:do_action:vsplitswitch>', 'noremap'
                \)

    " file

    call denite#custom#source('file',     'sorters',  ['sorter/word'])

    " file/rec

    call denite#custom#source('file/rec', 'sorters',  ['sorter/word'])

    " file/git

    call denite#custom#alias('source', 'file/git', 'file/rec')
    call denite#custom#var(
                \ 'file/git', 'command',
                \ ['git', 'ls-files', '-co', '--exclude-standard']
                \)
    call denite#custom#source('file/git', 'sorters',  ['sorter/word'])

    " grep/git

    call denite#custom#alias('source', 'grep/git', 'grep')
    call denite#custom#var('grep/git', 'command',
                \ ['git', 'grep']
                \)
    call denite#custom#var('grep/git', 'recursive_opts', [])
    call denite#custom#var('grep/git', 'pattern_opt',    [])

    " grep

    call denite#custom#var('grep', 'default_opts',
                \ [
                \   '-nH',
                \   '--exclude-dir=.git',
                \   '--exclude-dir=storage',
                \   '--exclude=tags',
                \   '--exclude=GPATH',
                \   '--exclude=GTAGS',
                \   '--exclude=GRTAGS',
                \   '--exclude=_ide_helper.php',
                \ ]
                \)
    call denite#custom#var('grep', 'patten_opt', ['-E'])

    " prompt

    call denite#custom#option('default', 'prompt', '$')
'''
depends  = ['neoyank.vim', 'neomru.vim', 'denite-git']


[[plugins]]
repo = 'Shougo/neomru.vim'


[[plugins]]
repo     = 'Shougo/neoyank.vim'


[[plugins]]
repo  = 'rhysd/vim-textobj-ruby'
on_ft = ['ruby', 'eruby']
hook_source = '''
    let g:textobj_ruby_more_mappings = 1
'''


[[plugins]]
repo  = 'tpope/vim-endwise'
on_ft = ['ruby', 'eruby']


[[plugins]]
repo  = 'davidhalter/jedi'
on_ft = ['python']


[[plugins]]
repo  = 'ncm2/ncm2-jedi'
on_ft = ['python']


[[plugins]]
repo     = 'neoclide/denite-git'

